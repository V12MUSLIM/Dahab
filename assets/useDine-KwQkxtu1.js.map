{"version":3,"file":"useDine-KwQkxtu1.js","sources":["../../src/services/Dine.js","../../src/hooks/useDine.jsx"],"sourcesContent":["import api from \"@/api/axios\";\r\n\r\nexport const getRestaurants = async () => {\r\n  try {\r\n    const response = await api.get(\"/restaurant\"); \r\n    // Uncomment the next line for debugging only\r\n    // if (process.env.NODE_ENV === \"development\") console.log(\"Restaurant Response:\", response);\r\n    // The API may return data in different formats:\r\n    // - response.data.restaurants: when restaurants are returned as a property\r\n    // - response.data.data: when data is nested under 'data'\r\n    // - response.data: fallback if above are not present\r\n    const data = response.data.restaurants || response.data.data || response.data;\r\n    return Array.isArray(data) ? data : [];\r\n  } catch (error) {\r\n    console.error(\"Error fetching restaurants:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getCafes = async () => {\r\n  try {\r\n    const response = await api.get(\"/cafe\"); // Expected response: { cafes: [...] } or { data: [...] }\r\n    // Uncomment the next line for debugging only\r\n    // if (process.env.NODE_ENV === \"development\") console.log(\"Cafe Response:\", response);\r\n    const data = response.data.cafes || response.data.data || response.data;\r\n    return Array.isArray(data) ? data : [];\r\n  } catch (error) {\r\n    console.error(\"Error fetching cafes:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * Fetches a dine item (restaurant or cafe) by ID.\r\n * Always returns an array: [item] if found, [] if not found or error.\r\n */\r\nconst fetchCafeById = async (id) => {\r\n  try {\r\n    const response = await api.get(`/cafe/${id}`);\r\n    const data = response.data.data || response.data;\r\n    return data ? [data] : [];\r\n  } catch (error) {\r\n    console.error(\"Error fetching cafe by ID:\", error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getDineById = async (id) => {\r\n  try {\r\n    const response = await api.get(`/restaurant/${id}`);\r\n    const data = response.data.data || response.data;\r\n    return data ? [data] : [];\r\n  } catch (error) {\r\n    // If restaurant fetch fails, try cafe\r\n    return await fetchCafeById(id);\r\n  }\r\n};\r\n","import { useQuery } from \"@tanstack/react-query\";\r\nimport { getRestaurants, getCafes } from \"@/services/Dine\";\r\nimport { useState, useMemo } from \"react\";\r\n\r\nexport const useDine = () => {\r\n  const { data: restaurants = [], isLoading: loadingRestaurants } = useQuery({\r\n    queryKey: [\"restaurants\"],\r\n    queryFn: getRestaurants,\r\n    staleTime: 5 * 60 * 1000,\r\n  });\r\n\r\n  const { data: cafes = [], isLoading: loadingCafes } = useQuery({\r\n    queryKey: [\"cafes\"],\r\n    queryFn: getCafes,\r\n    staleTime: 5 * 60 * 1000,\r\n  });\r\n\r\n  const [favorites, setFavorites] = useState([]);\r\n\r\n  const allDining = useMemo(() => {\r\n    return [...(restaurants || []), ...(cafes || [])];\r\n  }, [restaurants, cafes]);\r\n\r\n  const isLoading = loadingRestaurants || loadingCafes;\r\n\r\n  const getAllCategories = useMemo(() => {\r\n    if (!allDining || allDining.length === 0) return [];\r\n    return [...new Set(allDining.map((d) => d.category).filter(Boolean))];\r\n  }, [allDining]);\r\n\r\n  const getDineByCategory = (category) => {\r\n    if (!allDining) return [];\r\n    if (category === \"All\") return allDining;\r\n    return allDining.filter((d) => d.category === category);\r\n  };\r\n\r\n  const getDineById = (idPage) => {\r\n    if (!allDining) return null;\r\n    return allDining.find(\r\n      (d) => String(d.IdPage).toLowerCase() === String(idPage).toLowerCase()\r\n    );\r\n  };\r\n\r\n  const toggleFavorite = (id) => {\r\n    setFavorites((prev) =>\r\n      prev.includes(id) ? prev.filter((f) => f !== id) : [...prev, id]\r\n    );\r\n  };\r\n\r\n  const isFavorite = (id) => favorites.includes(id);\r\n\r\n  return {\r\n    restaurants,\r\n    cafes,\r\n    allDining,\r\n    getAllCategories,\r\n    getDineByCategory,\r\n    getDineById,\r\n    toggleFavorite,\r\n    isFavorite,\r\n    favorites,\r\n    isLoading,\r\n  };\r\n};\r\n"],"names":["getRestaurants","response","api","data","error","getCafes","useDine","restaurants","loadingRestaurants","useQuery","cafes","loadingCafes","favorites","setFavorites","useState","allDining","useMemo","isLoading","getAllCategories","d","category","idPage","id","prev"],"mappings":"wFAEO,MAAMA,EAAiB,SAAY,CACxC,GAAI,CACF,MAAMC,EAAW,MAAMC,EAAI,IAAI,aAAa,EAOtCC,EAAOF,EAAS,KAAK,aAAeA,EAAS,KAAK,MAAQA,EAAS,KACzE,OAAO,MAAM,QAAQE,CAAI,EAAIA,EAAO,CAAA,CACtC,OAASC,EAAO,CACd,eAAQ,MAAM,8BAA+BA,CAAK,EAC3C,CAAA,CACT,CACF,EAEaC,EAAW,SAAY,CAClC,GAAI,CACF,MAAMJ,EAAW,MAAMC,EAAI,IAAI,OAAO,EAGhCC,EAAOF,EAAS,KAAK,OAASA,EAAS,KAAK,MAAQA,EAAS,KACnE,OAAO,MAAM,QAAQE,CAAI,EAAIA,EAAO,CAAA,CACtC,OAASC,EAAO,CACd,eAAQ,MAAM,wBAAyBA,CAAK,EACrC,CAAA,CACT,CACF,EC1BaE,EAAU,IAAM,CAC3B,KAAM,CAAE,KAAMC,EAAc,CAAA,EAAI,UAAWC,CAAA,EAAuBC,EAAS,CACzE,SAAU,CAAC,aAAa,EACxB,QAAST,EACT,UAAW,GAAS,CACrB,EAEK,CAAE,KAAMU,EAAQ,CAAA,EAAI,UAAWC,CAAA,EAAiBF,EAAS,CAC7D,SAAU,CAAC,OAAO,EAClB,QAASJ,EACT,UAAW,IAAS,GAAA,CACrB,EAEK,CAACO,EAAWC,CAAY,EAAIC,EAAAA,SAAS,CAAA,CAAE,EAEvCC,EAAYC,EAAAA,QAAQ,IACjB,CAAC,GAAIT,GAAe,CAAA,EAAK,GAAIG,GAAS,CAAA,CAAG,EAC/C,CAACH,EAAaG,CAAK,CAAC,EAEjBO,EAAYT,GAAsBG,EAElCO,EAAmBF,EAAAA,QAAQ,IAC3B,CAACD,GAAaA,EAAU,SAAW,EAAU,CAAA,EAC1C,CAAC,GAAG,IAAI,IAAIA,EAAU,IAAKI,GAAMA,EAAE,QAAQ,EAAE,OAAO,OAAO,CAAC,CAAC,EACnE,CAACJ,CAAS,CAAC,EAuBd,MAAO,CACL,YAAAR,EACA,MAAAG,EACA,UAAAK,EACA,iBAAAG,EACA,kBA1ByBE,GACpBL,EACDK,IAAa,MAAcL,EACxBA,EAAU,OAAQI,GAAMA,EAAE,WAAaC,CAAQ,EAF/B,CAAA,EA0BvB,YArBmBC,GACdN,EACEA,EAAU,KACdI,GAAM,OAAOA,EAAE,MAAM,EAAE,gBAAkB,OAAOE,CAAM,EAAE,YAAA,CAAY,EAFhD,KAqBvB,eAfsBC,GAAO,CAC7BT,EAAcU,GACZA,EAAK,SAASD,CAAE,EAAIC,EAAK,OAAQ,GAAM,IAAMD,CAAE,EAAI,CAAC,GAAGC,EAAMD,CAAE,CAAA,CAEnE,EAYE,WAVkBA,GAAOV,EAAU,SAASU,CAAE,EAW9C,UAAAV,EACA,UAAAK,CAAA,CAEJ"}